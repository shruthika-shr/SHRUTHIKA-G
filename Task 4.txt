#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Structure to represent a task
struct Task {
    string description;
    bool isCompleted;

    // Constructor to initialize a new task
    Task(string desc) {
        description = desc;
        isCompleted = false;
    }
};

// Function to add a task
void addTask(vector<Task>& tasks, const string& description) {
    Task newTask(description);
    tasks.push_back(newTask);
    cout << "Task added: " << description << endl;
}

// Function to display all tasks
void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
    } else {
        cout << "To-Do List:\n";
        for (int i = 0; i < tasks.size(); ++i) {
            cout << (i + 1) << ". " << tasks[i].description << " ["
                 << (tasks[i].isCompleted ? "Completed" : "Pending") << "]\n";
        }
    }
}

// Function to mark a task as completed
void markTaskAsCompleted(vector<Task>& tasks, int taskIndex) {
    if (taskIndex >= 0 && taskIndex < tasks.size()) {
        tasks[taskIndex].isCompleted = true;
        cout << "Task " << taskIndex + 1 << " marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

// Function to remove a task
void removeTask(vector<Task>& tasks, int taskIndex) {
    if (taskIndex >= 0 && taskIndex < tasks.size()) {
        tasks.erase(tasks.begin() + taskIndex);
        cout << "Task " << taskIndex + 1 << " removed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

int main() {
    vector<Task> tasks;
    int choice;
    string taskDescription;
    int taskIndex;

    while (true) {
        // Display menu
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();  // To consume any leftover newline character

        switch (choice) {
            case 1:
                // Add Task
                cout << "Enter the description of the task: ";
                getline(cin, taskDescription);
                addTask(tasks, taskDescription);
                break;

            case 2:
                // View Tasks
                viewTasks(tasks);
                break;

            case 3:
                // Mark Task as Completed
                viewTasks(tasks);
                cout << "Enter the task number to mark as completed: ";
                cin >> taskIndex;
                cin.ignore();
                markTaskAsCompleted(tasks, taskIndex - 1);  // Index starts from 0
                break;

            case 4:
                // Remove Task
                viewTasks(tasks);
                cout << "Enter the task number to remove: ";
                cin >> taskIndex;
                cin.ignore();
                removeTask(tasks, taskIndex - 1);  // Index starts from 0
                break;

            case 5:
                // Exit
                cout << "Exiting the To-Do List Manager. Goodbye!\n";
                return 0;

            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
