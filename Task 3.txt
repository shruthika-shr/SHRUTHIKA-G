#include <iostream>
#include <vector>

using namespace std;

// Function to initialize the game board
void initializeBoard(vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            board[i][j] = ' ';  // Initially, all cells are empty
        }
    }
}

// Function to display the current game board
void displayBoard(const vector<vector<char>>& board) {
    cout << "\nCurrent Board:\n";
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << "\n";
        if (i < 2) cout << "---------\n";
    }
    cout << endl;
}

// Function to check if a player has won
bool checkWin(const vector<vector<char>>& board, char player) {
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) || // Check rows
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) { // Check columns
            return true;
        }
    }
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) || // Check diagonal
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) { // Check reverse diagonal
        return true;
    }
    return false;
}

// Function to check for a draw
bool checkDraw(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == ' ') return false;  // Empty space means no draw yet
    return true;  // If no empty spaces, it's a draw
}

// Function to handle a player's move
bool makeMove(vector<vector<char>>& board, int row, int col, char player) {
    if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
        cout << "Invalid move! Try again.\n";
        return false;
    }
    board[row][col] = player;  // Place the player's mark
    return true;
}

int main() {
    vector<vector<char>> board(3, vector<char>(3));
    bool playAgain = true;

    while (playAgain) {
        initializeBoard(board);  // Reset the board for a new game
        char currentPlayer = 'X';
        bool gameOver = false;

        while (!gameOver) {
            displayBoard(board);  // Show the current game board
            int row, col;
            cout << "Player " << currentPlayer << ", enter your move (row and column 0-2): ";
            cin >> row >> col;

            // Handle the move
            if (makeMove(board, row, col, currentPlayer)) {
                // Check if the current player has won
                if (checkWin(board, currentPlayer)) {
                    displayBoard(board);
                    cout << "Player " << currentPlayer << " wins!\n";
                    gameOver = true;
                }
                // Check if it's a draw
                else if (checkDraw(board)) {
                    displayBoard(board);
                    cout << "It's a draw!\n";
                    gameOver = true;
                }
                // Switch to the other player
                else {
                    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                }
            }
        }

        // Ask if players want to play again
        char choice;
        cout << "Do you want to play again? (Y/N): ";
        cin >> choice;
        playAgain = (choice == 'Y' || choice == 'y');
    }

    cout << "Thanks for playing!\n";
    return 0;
}
